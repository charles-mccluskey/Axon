namespace nnmodel2;

class NeuralNetwork{
    1 <@>- * Layer layers;
   public  NeuralNetwork(int numHiddenLayers, int nodesPerLayer, int numInputs, int numOutputs){
    layers = new ArrayList<Layer>();
    	//build input layer
    	addLayer();
    	for(int i=0;i<numInputs;i++) {
    		getLayer(0).addNeuron(0, 0);
    	}
    	//build hidden layers
	   for(int i=1;i<=numHiddenLayers;i++) {
		   addLayer();
		   for(int j=0;j<nodesPerLayer;j++) {
			   getLayer(i).addNeuron(0,0);
		   }
	   }
	   //build output layer
	   addLayer();
	   for(int i=0;i<numOutputs;i++) {
		   getLayer(1+numHiddenLayers).addNeuron(0, 0);
	   }
	   //neurons have been created, now to connect them.
	   Random rng = new Random();
	   for(int l=0;l<numHiddenLayers-1;l++) {
		   for(int n=0;n<getLayer(l).numberOfNeurons();n++) {//nodes in neural layer
			   for(int m=0;m<getLayer(l+1).numberOfNeurons();m++) {//nodes in adjacent neural layer
				   Connection con = new Connection(rng.nextDouble(),getLayer(l).getNeuron(n),getLayer(l+1).getNeuron(m));// randomly initialize weights
			   }
		   }
	   }
  }
    
}

class Neuron{
	1 inputNeuron -- 0..* Connection outputConnections;
	1 outputNeuron -- 0..* Connection inputConnections;
	
	Double bias;
	Double neuralValue;
	
	private double sigmoid(double input) {
		  return 1 / (1 + Math.exp(-1*input));
	}
	
   public void processInputs(){
	   double sum = getBias();
	   List<Connection> connections = getInputConnections();
	   List<Double> weights = new ArrayList<Double>();
	   for(int i=0;i<connections.size();i++) {
		  sum += connections.get(i).getInputNeuron().getNeuralValue()*connections.get(i).getWeight().getValue(); 
	   }
	   setNeuralValue(sigmoid(sum));
  }
}

class Layer{
    1 -- 1..* Neuron;

}

class Connection{
    1 -- 1 Weight;

}

class Weight{
	Double value;
}